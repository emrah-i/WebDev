# Generated by Django 4.2.1 on 2023-10-02 18:13

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('premium', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('questions', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), size=None)),
            ],
        ),
        migrations.CreateModel(
            name='ExamResult',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('transcript', models.JSONField()),
                ('score', models.PositiveIntegerField()),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('exam_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school_prep.exam')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GeneralCategory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='HomeModule',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('display', models.CharField(max_length=255)),
                ('icon', models.CharField(max_length=255)),
                ('path', models.CharField(max_length=255)),
                ('flashcards', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('identifier', models.CharField(max_length=255)),
                ('order', models.PositiveSmallIntegerField()),
                ('completed', models.ManyToManyField(blank=True, related_name='completed_module_users', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SpecificCategory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('general_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school_prep.generalcategory')),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('order', models.PositiveSmallIntegerField()),
                ('path', models.CharField(max_length=255)),
                ('completed', models.ManyToManyField(blank=True, related_name='completed_section_users', to=settings.AUTH_USER_MODEL)),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school_prep.module')),
            ],
        ),
        migrations.CreateModel(
            name='PracticeQuestion',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('text', models.TextField()),
                ('difficulty', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(limit_value=1), django.core.validators.MaxValueValidator(limit_value=3)])),
                ('correct_answer', models.CharField(max_length=255)),
                ('wrong_answers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
                ('completed', models.ManyToManyField(blank=True, related_name='completed_question_users', to=settings.AUTH_USER_MODEL)),
                ('prioritize', models.ManyToManyField(blank=True, related_name='prioritizing_question_users', to=settings.AUTH_USER_MODEL)),
                ('specific_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school_prep.specificcategory')),
                ('tag', models.ManyToManyField(blank=True, related_name='tagged_question_users', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('text', models.TextField()),
                ('exam_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school_prep.examresult')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='module',
            name='specific_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school_prep.specificcategory'),
        ),
        migrations.CreateModel(
            name='ExamQuestion',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('text', models.TextField()),
                ('difficulty', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(limit_value=1), django.core.validators.MaxValueValidator(limit_value=3)])),
                ('correct_answer', models.CharField(max_length=255)),
                ('wrong_answers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
                ('prioritize', models.ManyToManyField(blank=True, related_name='prioritizing_exam_question_users', to=settings.AUTH_USER_MODEL)),
                ('specific_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school_prep.specificcategory')),
                ('tag', models.ManyToManyField(blank=True, related_name='tagged_exam_question_users', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='exam',
            name='general_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school_prep.generalcategory'),
        ),
    ]
